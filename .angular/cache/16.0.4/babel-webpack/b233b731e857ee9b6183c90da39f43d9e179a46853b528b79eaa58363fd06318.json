{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PHONEBOOK } from './mock/mock-phonebook';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PhonebookApiService = /*#__PURE__*/(() => {\n  class PhonebookApiService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = '//jsonplaceholder.typicode.com/comments?postId=';\n      this.useMock = false; // When flagged as true, will use mock instead of actual API calls.\n    }\n\n    getPhonebook(postId) {\n      if (this.useMock) {\n        console.log('PhonebookApiService: Using Mock');\n        return of(PHONEBOOK);\n      } else {\n        console.log('PhonebookApiService: HTTP Request submitted for postId=' + postId);\n        return this.http.get(this.apiUrl + postId).pipe(map(res => res));\n      }\n    }\n    sortPhonebook(posts, sortCriteria) {\n      return posts.sort((a, b) => {\n        const sortTest = a[this.toCamelCase(sortCriteria.sortColumn)] < b[this.toCamelCase(sortCriteria.sortColumn)];\n        if (sortCriteria.sortDirection === 'desc') {\n          return sortTest ? 1 : -1;\n        } else {\n          return sortTest ? -1 : 1;\n        }\n      });\n    }\n    toCamelCase(str) {\n      return str.replace(/\\s(.)/g, function ($1) {\n        return $1.toUpperCase();\n      }).replace(/\\s/g, '').replace(/^(.)/, function ($1) {\n        return $1.toLowerCase();\n      });\n    }\n    getColumns() {\n      return ['Id', 'PostId', 'Name', 'Email', 'Body'];\n    }\n  }\n  PhonebookApiService.ɵfac = function PhonebookApiService_Factory(t) {\n    return new (t || PhonebookApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  PhonebookApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PhonebookApiService,\n    factory: PhonebookApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return PhonebookApiService;\n})();\nexport class PostItem {}\nexport class PostSortCriteria {}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}